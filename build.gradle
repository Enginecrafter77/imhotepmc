plugins {
	id 'dev.enginecrafter77.githubrelease'
	id 'com.matthewprenger.cursegradle'
	id 'fr.brouillard.oss.gradle.jgitver'
	id 'com.gtnewhorizons.retrofuturagradle'
}

def githubArtifactName = objects.property(String)

group = "dev.enginecrafter77.imhotepmc"
archivesBaseName = "ImhotepMC"

// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
	mcVersion = '1.12.2'
	mcpMappingChannel = 'stable'
	mcpMappingVersion = '39'
	username = System.getenv("MINECRAFT_USERNAME") ?: "Steve"
	extraRunJvmArguments.add("-ea")
}

repositories {
    maven { url = 'https://modmaven.dev' }
    maven { url = "https://cursemaven.com" }
}

test {
    useJUnitPlatform()
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-jcl:2.17.1'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation 'li.cil.oc:OpenComputers:MC1.12.2-1.7.5.+:api'

    runtimeOnly "codechicken:CodeChickenLib:1.12.2-3.2.3.+:universal"
    runtimeOnly "cofh:CoFHCore:1.12.2-4.6.3.+:universal"
    runtimeOnly "cofh:CoFHWorld:1.12.2-1.3.1.+:universal"
    runtimeOnly "cofh:ThermalFoundation:1.12.2-2.6.0.+:universal"
    runtimeOnly "cofh:ThermalExpansion:1.12.2-5.5.4.+:universal"
    runtimeOnly "cofh:ThermalDynamics:1.12.2-2.5.5.+:universal"
    runtimeOnly "cofh:RedstoneFlux:1.12-2.1.0.7:universal"
    runtimeOnly "mezz.jei:jei_1.12.2:4.9.2.196"
    runtimeOnly "curse.maven:Hwyla-253449:2568751"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

jgitver {
    autoIncrementPatch false
    nonQualifierBranches "main"
}

afterEvaluate {
	githubArtifactName.set("${archivesBaseName}-${minecraft.mcVersion.get()}-${project.version}.jar")
}

jar {
    manifest {
        attributes([
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor": "Enginecrafter77"
        ])
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "mcversion", project.minecraft.version
    inputs.property "version", project.version.toString()

    // replace stuff in mcmod.info, nothing else
	filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
		// Replace version and mcversion
		fcd.expand ('version': project.version, 'mcversion': project.minecraft.version)
	}

    // Move ATs to meta inf directory
    rename '(.+_at.cfg)', 'META-INF/$1'
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_APIKEY") ?: '#invalid-key#'
    project {
        id = project.properties['curseforge.project_id'] ?: '#invalid-id#'
        releaseType = System.getenv("CURSEFORGE_RELEASE_TYPE") ?: 'release'
        changelogType = 'markdown'
        changelog = "For changelog, see the github repository."

        mainArtifact(jar) {
            displayName = "${project.archivesBaseName}-${project.minecraft.version}-${project.version}.jar"
        }
    }
    options {
        debug System.getenv("DRY_RUN") != null
    }
}

github {
	repository = project.properties['github.repository']
	token = System.getenv("GITHUB_TOKEN")
	artifacts {
		from jar named githubArtifactName
	}
}
